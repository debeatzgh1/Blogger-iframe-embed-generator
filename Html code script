<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blogger Iframe Embed Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                        'primary-dark': '#4B4BC8',
                    }
                }
            }
        }
    </script>
</head>
<body class="min-h-full bg-white dark:bg-gray-900 transition-colors duration-200">
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2">
                Blogger Iframe Generator
            </h1>
            <p class="text-gray-600 dark:text-gray-300 text-lg">
                Generate iframe embed codes for your Blogger posts
            </p>
        </div>

        <!-- Input Section -->
        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6 shadow-sm">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                URL Input
            </h2>
            
            <div class="space-y-4">
                <div>
                    <label for="urlInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Website URL
                    </label>
                    <input 
                        type="url" 
                        id="urlInput" 
                        placeholder="https://example.com"
                        class="w-full px-4 py-3 text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-colors"
                    >
                </div>

                <!-- Iframe Options -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label for="widthInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Width
                        </label>
                        <input 
                            type="text" 
                            id="widthInput" 
                            value="100%"
                            class="w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors"
                        >
                    </div>
                    <div>
                        <label for="heightInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Height
                        </label>
                        <input 
                            type="text" 
                            id="heightInput" 
                            value="400"
                            class="w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors"
                        >
                    </div>
                    <div>
                        <label for="borderInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Border
                        </label>
                        <select 
                            id="borderInput"
                            class="w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors"
                        >
                            <option value="0">No Border</option>
                            <option value="1">1px Border</option>
                            <option value="2">2px Border</option>
                        </select>
                    </div>
                </div>

                <!-- Additional Options -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="flex items-center">
                        <input 
                            type="checkbox" 
                            id="allowFullscreen" 
                            checked
                            class="w-4 h-4 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary dark:focus:ring-primary dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                        >
                        <label for="allowFullscreen" class="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                            Allow Fullscreen
                        </label>
                    </div>
                    <div class="flex items-center">
                        <input 
                            type="checkbox" 
                            id="responsiveFrame"
                            class="w-4 h-4 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary dark:focus:ring-primary dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                        >
                        <label for="responsiveFrame" class="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                            Make Responsive
                        </label>
                    </div>
                </div>

                <button 
                    id="generateBtn"
                    class="w-full md:w-auto px-6 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-lg transition-colors duration-200 focus:ring-4 focus:ring-primary/30"
                >
                    Generate Iframe Code
                </button>
            </div>
        </div>

        <!-- Output Section -->
        <div id="outputSection" class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6 shadow-sm hidden">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
                    Generated Embed Code
                </h2>
                <button 
                    id="copyBtn"
                    class="px-4 py-2 bg-primary hover:bg-primary-dark text-white font-medium rounded-lg transition-colors duration-200 focus:ring-4 focus:ring-primary/30"
                >
                    Copy Code
                </button>
            </div>
            
            <div class="relative">
                <textarea 
                    id="embedCode" 
                    readonly
                    rows="6"
                    class="w-full px-4 py-3 text-sm font-mono bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white resize-none focus:ring-2 focus:ring-primary focus:border-transparent"
                ></textarea>
            </div>

            <!-- Success Message -->
            <div id="copySuccess" class="mt-3 p-3 bg-green-100 dark:bg-green-900/30 border border-green-400 dark:border-green-600 text-green-700 dark:text-green-400 rounded-lg hidden">
                âœ… Embed code copied to clipboard!
            </div>
        </div>

        <!-- Preview Section -->
        <div id="previewSection" class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 shadow-sm hidden">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                Live Preview
            </h2>
            <div id="previewContainer" class="border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
                <!-- Preview iframe will be inserted here -->
            </div>
        </div>

        <!-- Instructions -->
        <div class="bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg p-6 mt-6">
            <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-300 mb-2">
                How to Use in Blogger
            </h3>
            <ol class="list-decimal list-inside space-y-2 text-blue-800 dark:text-blue-400">
                <li>Copy the generated iframe code above</li>
                <li>In your Blogger post editor, switch to "HTML" view</li>
                <li>Paste the iframe code where you want the embed to appear</li>
                <li>Switch back to "Compose" view to see the preview</li>
                <li>Publish your post</li>
            </ol>
        </div>
    </div>

    <script>
        // Dark mode detection
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });

        // DOM elements
        const urlInput = document.getElementById('urlInput');
        const widthInput = document.getElementById('widthInput');
        const heightInput = document.getElementById('heightInput');
        const borderInput = document.getElementById('borderInput');
        const allowFullscreen = document.getElementById('allowFullscreen');
        const responsiveFrame = document.getElementById('responsiveFrame');
        const generateBtn = document.getElementById('generateBtn');
        const outputSection = document.getElementById('outputSection');
        const previewSection = document.getElementById('previewSection');
        const embedCode = document.getElementById('embedCode');
        const copyBtn = document.getElementById('copyBtn');
        const copySuccess = document.getElementById('copySuccess');
        const previewContainer = document.getElementById('previewContainer');

        // Validation function
        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        // Generate iframe code
        function generateIframeCode() {
            const url = urlInput.value.trim();
            
            if (!url) {
                showAlert('Please enter a URL');
                return;
            }

            if (!isValidUrl(url)) {
                showAlert('Please enter a valid URL');
                return;
            }

            const width = widthInput.value.trim() || '100%';
            const height = heightInput.value.trim() || '400';
            const border = borderInput.value;
            const fullscreen = allowFullscreen.checked;
            const responsive = responsiveFrame.checked;

            let iframeAttributes = [];
            iframeAttributes.push(`src="${url}"`);
            iframeAttributes.push(`width="${width}"`);
            iframeAttributes.push(`height="${height}"`);
            iframeAttributes.push(`frameborder="${border}"`);
            
            if (fullscreen) {
                iframeAttributes.push('allowfullscreen');
            }

            let iframeCode = `<iframe ${iframeAttributes.join(' ')}></iframe>`;

            // Add responsive wrapper if requested
            if (responsive) {
                iframeCode = `<div style="position: relative; overflow: hidden; padding-top: 56.25%; /* 16:9 Aspect Ratio */">
    <iframe src="${url}" 
            style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: ${border}px solid #ccc;" 
            frameborder="${border}"${fullscreen ? ' allowfullscreen' : ''}>
    </iframe>
</div>`;
            }

            // Display the code
            embedCode.value = iframeCode;
            outputSection.classList.remove('hidden');

            // Update preview
            updatePreview(url, width, height, border, fullscreen, responsive);
        }

        // Update preview
        function updatePreview(url, width, height, border, fullscreen, responsive) {
            let previewIframe;
            
            if (responsive) {
                previewContainer.innerHTML = `
                    <div style="position: relative; overflow: hidden; padding-top: 56.25%;">
                        <iframe src="${url}" 
                                style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: ${border}px solid #ccc;" 
                                frameborder="${border}"${fullscreen ? ' allowfullscreen' : ''}>
                        </iframe>
                    </div>
                `;
            } else {
                const previewWidth = width.includes('%') ? '100%' : Math.min(parseInt(width) || 400, 600) + 'px';
                const previewHeight = Math.min(parseInt(height) || 400, 400) + 'px';
                
                previewContainer.innerHTML = `
                    <iframe src="${url}" 
                            width="${previewWidth}" 
                            height="${previewHeight}" 
                            frameborder="${border}"${fullscreen ? ' allowfullscreen' : ''}>
                    </iframe>
                `;
            }
            
            previewSection.classList.remove('hidden');
        }

        // Copy to clipboard
        async function copyToClipboard() {
            try {
                await navigator.clipboard.writeText(embedCode.value);
                copySuccess.classList.remove('hidden');
                setTimeout(() => {
                    copySuccess.classList.add('hidden');
                }, 3000);
            } catch (err) {
                // Fallback for older browsers
                embedCode.select();
                document.execCommand('copy');
                copySuccess.classList.remove('hidden');
                setTimeout(() => {
                    copySuccess.classList.add('hidden');
                }, 3000);
            }
        }

        // Custom alert function
        function showAlert(message) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-sm w-full mx-4">
                    <p class="text-gray-700 dark:text-gray-300 mb-4">${message}</p>
                    <div class="flex justify-end">
                        <button class="px-4 py-2 bg-primary text-white hover:bg-primary-dark rounded" onclick="this.closest('.fixed').remove()">OK</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Event listeners
        generateBtn.addEventListener('click', generateIframeCode);
        copyBtn.addEventListener('click', copyToClipboard);
        
        // Generate on Enter key
        urlInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                generateIframeCode();
            }
        });

        // Auto-generate when inputs change (debounced)
        let debounceTimer;
        function debouncedGenerate() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                if (urlInput.value.trim() && isValidUrl(urlInput.value.trim())) {
                    generateIframeCode();
                }
            }, 500);
        }

        [urlInput, widthInput, heightInput, borderInput, allowFullscreen, responsiveFrame].forEach(input => {
            input.addEventListener('input', debouncedGenerate);
            input.addEventListener('change', debouncedGenerate);
        });
    </script>
</body>
</html>
